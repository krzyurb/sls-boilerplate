default_environment: &default_environment
  docker:
    - image: circleci/node:8.10
  working_directory: ~/repo

version: 2

jobs:
  checkout:
    <<: *default_environment
    steps:
      - checkout
      - persist_to_workspace:
          root: ~/repo
          paths:
            - .
  build:
    <<: *default_environment
    steps:
      - attach_workspace:
          at: ~/repo
      - restore_cache:
          key: yarn-{{ checksum "yarn.lock" }}
      - run: yarn install
      - save_cache:
          key: yarn-{{ checksum "yarn.lock" }}
          paths:
            - ~/repo/node_modules
      - persist_to_workspace:
          root: ~/repo
          paths:
            - node_modules
  unit_integration_tests:
    <<: *default_environment
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Unit Tests
          command: yarn run test
  acceptance_tests:
    <<: *default_environment
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Deploy and run acceptanc tests
          command: |
            export STAGE=acc-test
            export NODE_ENV=test
            export REGION=$AWS_REGION
            export ACC_TEST_URL="$(yarn deploy | grep ServiceEndpoint | sed s/ServiceEndpoint\:\ //g)"
            echo 'export TEST_URL=$ACC_TEST_URL' >> $BASH_ENV
            source $BASH_ENV
            yarn run test:acc
  deploy_staging:
    <<: *default_environment
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Deploy staging
          command: |
            export STAGE=staging
            export NODE_ENV=$STG_NODE_ENV
            export REGION=$AWS_REGION
            yarn deploy
  deploy_production:
    <<: *default_environment
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Deploy production
          command: |
            export STAGE=production
            export NODE_ENV=production
            export REGION=$AWS_REGION
            yarn deploy

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - checkout
      - build:
          requires:
            - checkout
      - unit_integration_tests:
          requires:
            - build
      - acceptance_tests:
          requires:
            - unit_integration_tests
          filters:
            branches:
              only:
                - acceptance
      - deploy_staging:
          requires:
            - unit_integration_tests
          filters:
            branches:
              only:
                - master
      - deploy_production:
          requires:
            - unit_integration_tests
          filters:
            branches:
              only:
                - production
